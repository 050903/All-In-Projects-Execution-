# Constants for GF(2^8) operations
AES_PRIME_POLY = 0x11B # x^8 + x^4 + x^3 + x + 1

def gf_add(a, b):
    """Adds two numbers in GF(2^8) (equivalent to XOR)."""
    return a ^ b

def gf_mul_by_02(val):
    """Multiplies a value by 0x02 in GF(2^8) (xtime operation)."""
    if val & 0x80: # If MSB is set
        return (val << 1) ^ AES_PRIME_POLY
    else:
        return val << 1

def gf_mul(a, b):
    """Multiplies two numbers in GF(2^8)."""
    p = 0
    while b > 0:
        if b & 1: # If current bit of b is 1
            p = gf_add(p, a)
        
        # Multiply 'a' by x (0x02)
        if a & 0x80: # If MSB of 'a' is set
            a = (a << 1) ^ AES_PRIME_POLY
        else:
            a = a << 1
            
        b >>= 1 # Move to the next bit of b
    return p

# Precompute GF(2^8) multiplication by common constants for efficiency
# These are fixed coefficients in MixColumns matrix
GF_MUL_TABLE = {}
for i in range(256):
    GF_MUL_TABLE[(0x01, i)] = i
    GF_MUL_TABLE[(0x02, i)] = gf_mul_by_02(i)
    GF_MUL_TABLE[(0x03, i)] = gf_add(gf_mul_by_02(i), i) # 0x03 = 0x02 XOR 0x01
    
    # For inverse MixColumns
    GF_MUL_TABLE[(0x09, i)] = gf_add(gf_mul_by_02(gf_mul_by_02(gf_mul_by_02(i))), i) # 0x09 = x^3 + 1
    GF_MUL_TABLE[(0x0B, i)] = gf_add(gf_mul_by_02(gf_mul_by_02(gf_mul_by_02(i))), gf_add(gf_mul_by_02(i), i)) # 0x0B = x^3 + x + 1
    GF_MUL_TABLE[(0x0D, i)] = gf_add(gf_mul_by_02(gf_mul_by_02(gf_mul_by_02(i))), gf_add(gf_mul_by_02(i), i)) # 0x0D = x^3 + x^2 + 1 (Error in previous logic, 0x0D = 0x08 + 0x04 + 0x01)
    GF_MUL_TABLE[(0x0D, i)] = gf_add(gf_mul(0x08, i), gf_add(gf_mul(0x04, i), gf_mul(0x01, i))) # 0x0D = 0x08 XOR 0x04 XOR 0x01
    GF_MUL_TABLE[(0x0E, i)] = gf_add(gf_mul_by_02(gf_mul_by_02(gf_mul_by_02(i))), gf_add(gf_mul_by_02(gf_mul_by_02(i)), gf_mul_by_02(i))) # 0x0E = x^3 + x^2 + x

def get_gf_mul(a, b):
    """Helper to get precomputed or compute GF multiplication."""
    if (a, b) in GF_MUL_TABLE:
        return GF_MUL_TABLE[(a, b)]
    return gf_mul(a, b)